# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'assetsearch.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
import csv

fields = ["sl_no","ast_id","ast_srlno","ast_name","ast_type","ast_grp","ast_details","ast_parent","ast_oem","oem_contno",
        	"oem_contno_esk1","ast_seller","ast_sellerno","oem_email","oem_email_esk1","seller_email","created_by",
            "created_time","updated_by","updated_time","ast_purchasedate","ast_warranty_details",
        	"ast_warranty_enddate","ast_status","ast_price"]
class Ui_MainWindow_search(object):


    def generate(self):
      global fields
      pur_date1= self.dateEdit_purchasedate_1.text()
      pur_date2= self.dateEdit_purchasedate_2.text()
      asstid= self.lineEdit_assetid.text()
      serlno= self.lineEdit_assetserialno.text()
      ast_type= self.lineEdit_assettype.text()
      ast_grp= self.lineEdit_Assetgroup.text()
      print("asstid: "+asstid)
      print("pur_date1: "+pur_date1)
      print("pur_date2: "+pur_date2)
      print("serlno: "+serlno)
      print("ast_type: "+ast_type)
      print("ast_grp: "+ast_grp)
      if(pur_date1!=pur_date2):
          print("working from date")
          date=[pur_date1,pur_date2]
          print(date)
          connection = sqlite3.connect("appuser_db.db")
          cur = connection.cursor()
          scommand = '''SELECT * FROM asset where ast_purchasedate >= ? and ast_purchasedate <= ? ;'''
          cur.execute(scommand,(pur_date1,pur_date2,))
          rows = cur.fetchall()
          connection.close()
          print(rows)

          with open('Asset_data.csv', 'w') as f:
              # using csv.writer method from CSV package
              write = csv.writer(f)
              write.writerow(fields)
              write.writerows(rows)
          self.dateEdit_purchasedate_1.clear()
          self.dateEdit_purchasedate_2.clear()
      elif (asstid != ""):
          print("working from assetid")
          connection = sqlite3.connect("appuser_db.db")
          cur = connection.cursor()
          scommand = '''SELECT * FROM asset where ast_cont_id = ? ;'''
          cur.execute(scommand, (asstid,))
          rows = cur.fetchall()
          connection.close()
          print(rows)
          print("Rows are empty")

          with open('Asset_data.csv', 'w') as f:
              # using csv.writer method from CSV package
              write = csv.writer(f)
              write.writerow(fields)
              write.writerows(rows)
          self.lineEdit_assetid.clear()
      elif (serlno != ""):
          print("working from serlno")
          connection = sqlite3.connect("appuser_db.db")
          cur = connection.cursor()
          scommand = '''SELECT * FROM asset where ast_srlno = ? ;'''
          cur.execute(scommand, (serlno,))
          rows = cur.fetchall()
          connection.close()
          print(rows)

          with open('Asset_data.csv', 'w') as f:
              # using csv.writer method from CSV package
              write = csv.writer(f)
              write.writerow(fields)
              write.writerows(rows)
          self.lineEdit_assetserialno.clear()
      elif (ast_grp != ""):
          print("working from ast_grp")
          connection = sqlite3.connect("appuser_db.db")
          cur = connection.cursor()
          scommand = '''SELECT * FROM asset where ast_grp = ? ;'''
          cur.execute(scommand, (ast_grp,))
          rows = cur.fetchall()
          connection.commit()
          connection.close()
          print(rows)

          with open('Asset_data.csv', 'w') as f:
              # using csv.writer method from CSV package
              write = csv.writer(f)
              write.writerow(fields)
              write.writerows(rows)
          self.lineEdit_Assetgroup.clear()
      elif(ast_type != ""):
          print("working from ast_type")
          connection = sqlite3.connect("appuser_db.db")
          cur = connection.cursor()
          scommand = '''SELECT * FROM asset where ast_type = ? ;'''
          cur.execute(scommand, (ast_type,))
          rows = cur.fetchall()
          connection.commit()
          connection.close()
          print(rows)

          with open('Asset_data.csv', 'w') as f:
              # using csv.writer method from CSV package
              write = csv.writer(f)
              write.writerow(fields)
              write.writerows(rows)
          self.lineEdit_assettype.clear()
      else:
          print("no data found")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(628, 499)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.top_bar = QtWidgets.QFrame(self.centralwidget)
        self.top_bar.setGeometry(QtCore.QRect(0, 0, 630, 50))
        self.top_bar.setMaximumSize(QtCore.QSize(16777215, 50))
        self.top_bar.setStyleSheet("background-color:rgb(13, 41, 86)")
        self.top_bar.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.top_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_bar.setObjectName("top_bar")
        self.lable_title = QtWidgets.QLabel(self.top_bar)
        self.lable_title.setGeometry(QtCore.QRect(150, 0, 411, 51))
        self.lable_title.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.lable_title.setFont(font)
        self.lable_title.setStyleSheet("color: rgb(33, 189, 255);")
        self.lable_title.setObjectName("lable_title")
        self.label_55 = QtWidgets.QLabel(self.centralwidget)
        self.label_55.setGeometry(QtCore.QRect(160, 70, 331, 41))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.NoAntialias)
        self.label_55.setFont(font)
        self.label_55.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_55.setAutoFillBackground(False)
        self.label_55.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_55.setObjectName("label_55")
        self.dateEdit_purchasedate_1 = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit_purchasedate_1.setGeometry(QtCore.QRect(210, 150, 121, 18))
        self.dateEdit_purchasedate_1.setObjectName("dateEdit_purchasedate_1")
        self.dateEdit_purchasedate_2 = QtWidgets.QDateEdit(self.centralwidget)
        self.dateEdit_purchasedate_2.setGeometry(QtCore.QRect(400, 150, 121, 18))
        self.dateEdit_purchasedate_2.setObjectName("dateEdit_purchasedate_2")
        self.label_puschasedate = QtWidgets.QLabel(self.centralwidget)
        self.label_puschasedate.setGeometry(QtCore.QRect(50, 150, 131, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_puschasedate.setFont(font)
        self.label_puschasedate.setObjectName("label_puschasedate")
        self.label_to = QtWidgets.QLabel(self.centralwidget)
        self.label_to.setGeometry(QtCore.QRect(350, 150, 21, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_to.setFont(font)
        self.label_to.setObjectName("label_to")
        self.label_assetid = QtWidgets.QLabel(self.centralwidget)
        self.label_assetid.setGeometry(QtCore.QRect(130, 200, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_assetid.setFont(font)
        self.label_assetid.setObjectName("label_assetid")
        self.label_assetserialno = QtWidgets.QLabel(self.centralwidget)
        self.label_assetserialno.setGeometry(QtCore.QRect(60, 240, 131, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_assetserialno.setFont(font)
        self.label_assetserialno.setObjectName("label_assetserialno")
        self.label_Assetgroup = QtWidgets.QLabel(self.centralwidget)
        self.label_Assetgroup.setGeometry(QtCore.QRect(110, 320, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_Assetgroup.setFont(font)
        self.label_Assetgroup.setObjectName("label_Assetgroup")
        self.label_assettype = QtWidgets.QLabel(self.centralwidget)
        self.label_assettype.setGeometry(QtCore.QRect(120, 280, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_assettype.setFont(font)
        self.label_assettype.setObjectName("label_assettype")
        self.btn_generate = QtWidgets.QPushButton(self.centralwidget)
        self.btn_generate.setGeometry(QtCore.QRect(250, 400, 131, 41))
        self.btn_generate.setStyleSheet("color: rgb(47, 175, 255);")
        self.btn_generate.setObjectName("btn_generate")
        self.lineEdit_assetid = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_assetid.setGeometry(QtCore.QRect(210, 200, 213, 20))
        self.lineEdit_assetid.setObjectName("lineEdit_assetid")
        self.lineEdit_assetserialno = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_assetserialno.setGeometry(QtCore.QRect(210, 240, 213, 20))
        self.lineEdit_assetserialno.setObjectName("lineEdit_assetserialno")
        self.lineEdit_Assetgroup = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_Assetgroup.setGeometry(QtCore.QRect(210, 320, 213, 20))
        self.lineEdit_Assetgroup.setObjectName("lineEdit_Assetgroup")
        self.lineEdit_assettype = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_assettype.setGeometry(QtCore.QRect(210, 280, 213, 20))
        self.lineEdit_assettype.setObjectName("lineEdit_assettype")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.dateEdit_purchasedate_1, self.dateEdit_purchasedate_2)
        MainWindow.setTabOrder(self.dateEdit_purchasedate_2, self.lineEdit_assetid)
        MainWindow.setTabOrder(self.lineEdit_assetid, self.lineEdit_assetserialno)
        MainWindow.setTabOrder(self.lineEdit_assetserialno, self.lineEdit_assettype)
        MainWindow.setTabOrder(self.lineEdit_assettype, self.lineEdit_Assetgroup)
        MainWindow.setTabOrder(self.lineEdit_Assetgroup, self.btn_generate)


        self.btn_generate.clicked.connect(lambda: self.generate())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lable_title.setText(_translate("MainWindow", "   Inventory Management"))
        self.label_55.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" color:#ffa273;\">Asset Search</span></p></body></html>"))
        self.label_puschasedate.setText(_translate("MainWindow", "<html><head/><body><p>Purchase date from</p><p><br/></p></body></html>"))
        self.label_to.setText(_translate("MainWindow", "<html><head/><body><p>to</p></body></html>"))
        self.label_assetid.setText(_translate("MainWindow", "<html><head/><body><p>Asset Id</p></body></html>"))
        self.label_assetserialno.setText(_translate("MainWindow", "<html><head/><body><p>Asset serial number</p></body></html>"))
        self.label_Assetgroup.setText(_translate("MainWindow", "<html><head/><body><p>Asset Group</p></body></html>"))
        self.label_assettype.setText(_translate("MainWindow", "<html><head/><body><p>Asset type</p></body></html>"))
        self.btn_generate.setText(_translate("MainWindow", "Generate"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_search()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
